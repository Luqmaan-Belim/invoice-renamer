name: Drive Watch Renew

on:
  schedule:
    - cron: "0 2 * * *"      # daily at 02:00 UTC
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  renew:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/luqmaan-belim/invoice-renamer:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Register Drive watch channel
        env:
          GDRIVE_SA_JSON: ${{ secrets.GDRIVE_SA_JSON }}
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          python - <<'PY'
          import os, json, uuid
          from googleapiclient.discovery import build
          from google.oauth2 import service_account

          SA = json.loads(os.environ["GDRIVE_SA_JSON"])
          FOLDER_ID = os.environ["GDRIVE_FOLDER_ID"].strip()
          HOOK = os.environ["WEBHOOK_URL"].strip()

          SCOPES = ["https://www.googleapis.com/auth/drive"]
          creds = service_account.Credentials.from_service_account_info(SA, scopes=SCOPES)
          d = build("drive","v3",credentials=creds,cache_discovery=False)

          # Resolve if the provided folder id is a shortcut and detect Shared Drive
          meta = d.files().get(fileId=FOLDER_ID, fields="id,mimeType,driveId,shortcutDetails", supportsAllDrives=True).execute()
          if meta.get("mimeType") == "application/vnd.google-apps.shortcut":
            tgt = meta["shortcutDetails"]["targetId"]
            meta = d.files().get(fileId=tgt, fields="id,mimeType,driveId", supportsAllDrives=True).execute()

          drive_id = meta.get("driveId")

          # Get start token for My Drive or for the specific Shared Drive
          if drive_id:
            tok = d.changes().getStartPageToken(driveId=drive_id, supportsAllDrives=True).execute()["startPageToken"]
            body = {"id": str(uuid.uuid4()), "type": "web_hook", "address": HOOK}
            d.changes().watch(pageToken=tok, body=body, driveId=drive_id, supportsAllDrives=True).execute()
          else:
            tok = d.changes().getStartPageToken().execute()["startPageToken"]
            body = {"id": str(uuid.uuid4()), "type": "web_hook", "address": HOOK}
            d.changes().watch(pageToken=tok, body=body).execute()

          print("Watch registered/renewed for Drive changes.")
          PY
